import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

public class MealPlanner {
    private ArrayList<Week> weeklyPlans;
    private static final int DAYS_IN_WEEK = 7;
    private static final String[] DAYS_OF_THE_WEEK = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday",
            "Saturday" };
    private static final int COL_WIDTH = 16;
    private static final int LINE_WIDTH = (COL_WIDTH + 1) * DAYS_IN_WEEK;

    public static void main(String[] args) {
        MealPlanner mp = new MealPlanner();
        mp.loadDataFromCSV("data.csv");
        mp.printWeek("2025-08-24");
        mp.printWeek("2025-08-31");

    }

    /**
     * Constructs a new Meal Planner with an empty Week ArrayList.
     */
    public MealPlanner() {
        this.weeklyPlans = new ArrayList<>();
    }

    /**
     * @param weekAnchorDate the anchor date of the week to be returned.
     * @return the week in the meal planner with the given anchor date, or null
     *         if no such week exists.
     */
    public Week getWeek(String weekAnchorDate) {
        for (Week week : this.weeklyPlans) {
            if (week.getAnchorDate().equals(weekAnchorDate)) {
                return week;
            }
        }
        return null;
    }

    /**
     * Loads weeks, days, meals, and ingredients from a CSV file with a given name
     * and stores them in the meal planner. Reads each line and creates/retrieves
     * the appropriate week, day, meal, and ingredient in/from the weeklyPlans
     * ArrayList. Assumes the CSV file has a header and that each line is formatted
     * as WeekAnchorDate,DayOfWeek,MealName,IngredientName,Quantity,CarbsPer100g,
     * FatPer100g,ProteinPer100g, where the last three fields are optional.
     * Malformed lines are skipped entirely, but should not occur since the data
     * file is generated by the program, not the user.
     * 
     * @param filename the name of the CSV file containing data.
     * @throws IllegalArgumentException if the file name is null, empty, or only
     *                                  whitespace.
     */
    public void loadDataFromCSV(String filename) {
        if (!DataValidator.validateString(filename)) {
            throw new IllegalArgumentException("File name cannot be null, empty, or only whitespace.");
        }

        try {
            BufferedReader br = new BufferedReader(new FileReader(filename));

            String line = br.readLine();
            line = br.readLine(); // Skip header.
            while (line != null) {
                if (DataValidator.validateLine(line)) {
                    String[] tokens = line.split(",");

                    // Create new week, meal, and ingredient objects.
                    Week week = new Week(tokens[0]);
                    Meal meal = new Meal(tokens[2]);
                    Ingredient ing;
                    if (tokens.length == 5) {
                        ing = new Ingredient(tokens[3], Double.parseDouble(tokens[4]));
                    } else {
                        ing = new Ingredient(tokens[3], Double.parseDouble(tokens[4]), Double.parseDouble(tokens[5]),
                                Double.parseDouble(tokens[6]), Double.parseDouble(tokens[7]));
                    }

                    // Add the new week to the weeklyPlans ArrayList, or retrieve it
                    // if it already exists.
                    if (!this.weeklyPlans.contains(week)) {
                        this.weeklyPlans.add(week);
                    } else {
                        week = Week.getWeekByAnchor(this.weeklyPlans, week.getAnchorDate());
                    }

                    // Add the new meal to the correct day, or retrieve it if it
                    // already exists.
                    Day day = week.getDay(tokens[1]);
                    if (!day.getMeals().contains(meal)) {
                        day.addMeal(meal);
                    } else {
                        meal = day.getMeal(meal);
                    }

                    // Add the new ingredient to the meal if it doesn't already
                    // exist.
                    meal.addIngredient(ing);

                }

                line = br.readLine();
            }

            br.close();
        } catch (IOException e) {
            System.out.println(e);
        }
    }

    /**
     * Writes all data contained in the weeklyPlans ArrayList to a CSV file with
     * a given name. This includes all weeks, days, meals, and ingredients. The
     * CSV file has a header and is formatted as WeekAnchorDate,DayOfWeek,MealName,
     * IngredientName,Quantity,CarbsPer100g,FatPer100g,ProteinPer100g, where the
     * last three fields are optional. Allows for data to persist after the program
     * terminates.
     * 
     * @param filename the name of the CSV file to write to.
     * @throws IllegalArgumentException if the file name is null, empty, or only
     *                                  whitespace.
     */
    public void writeDataToCSV(String filename) {
        if (!DataValidator.validateString(filename)) {
            throw new IllegalArgumentException("File name cannot be null, empty, or only whitespace.");
        }

        try {
            PrintWriter pw = new PrintWriter(new File(filename));
            pw.println(
                    "WeekAnchorDate,DayOfWeek,MealName,IngredientName,Quantity,CarbsPer100g,FatPer100g,ProteinPer100g");

            for (Week week : this.weeklyPlans) {
                for (int i = 0; i < DAYS_IN_WEEK; i++) {
                    for (Meal meal : week.getDay(i).getMeals()) {
                        for (Ingredient ing : meal.getIngredients()) {
                            if (ing.hasNutrition()) {
                                pw.printf("%s,%s,%s,%s,%f,%f,%f,%f\n", week.getAnchorDate(), this.DAYS_OF_THE_WEEK[i],
                                        meal.getName(), ing.getName(), ing.getQuantity(), ing.getCarbsPer100Grams(),
                                        ing.getFatPer100Grams(), ing.getProteinPer100Grams());
                            } else {
                                pw.printf("%s,%s,%s,%s,%f\n", week.getAnchorDate(), this.DAYS_OF_THE_WEEK[i],
                                        meal.getName(), ing.getName(), ing.getQuantity());
                            }
                        }
                    }
                }
            }

            pw.close();
        } catch (IOException e) {
            System.out.println(e);
        }
    }

    /**
     * @param weekAnchorDate the anchor date of the week to be added to the meal
     *                       planner.
     */
    public void addWeek(String weekAnchorDate) {
        Week toAdd = new Week(weekAnchorDate);
        if (this.weeklyPlans.contains(toAdd)) {
            System.out.println("[Error] Week could not be added because it already exists.");
            return;
        }
        weeklyPlans.add(toAdd);
    }

    /**
     * @param weekAnchorDate the anchor date of the week to be removed from the meal
     *                       planner.
     */
    public void removeWeek(String weekAnchorDate) {
        if (!weeklyPlans.remove(new Week(weekAnchorDate))) {
            System.out.println("[Error] Week could not be removed because it doesn't exist.");
        }
    }

    /**
     * @param weekAnchorDate the anchor date of the week to which the meal should
     *                       be added.
     * @param dayOfWeek      the day of the week to which the meal should be added.
     * @param mealName       the name of the meal to be added.
     */
    public void addMeal(String weekAnchorDate, String dayOfWeek, String mealName) {
        Week week = Week.getWeekByAnchor(this.weeklyPlans, weekAnchorDate);
        if (week == null) {
            System.out.println("[Error] Meal could not be added because the given week does not exist.");
            return;
        }

        Day day = week.getDay(dayOfWeek);
        if (day == null) {
            System.out.println("[Error] Meal could not be added because the given day of the week is invalid.");
            return;
        }

        Meal meal = new Meal(mealName);
        if (day.getMeals().contains(meal)) {
            System.out.println("[Error] Meal could not be added because it already exists.");
            return;
        }

        day.addMeal(meal);
    }

    /**
     * @param weekAnchorDate the anchor date of the week in which the meal is
     *                       found.
     * @param dayOfWeek      the day of the week to in which the meal is found.
     * @param mealName       the name of the meal to be removed.
     */
    public void removeMeal(String weekAnchorDate, String dayOfWeek, String mealName) {
        Week week = Week.getWeekByAnchor(this.weeklyPlans, weekAnchorDate);
        if (week == null) {
            System.out.println("[Error] Meal could not be removed because the given week does not exist.");
            return;
        }

        Day day = week.getDay(dayOfWeek);
        if (day == null) {
            System.out.println("[Error] Meal could not be removed because the given day of the week is invalid.");
            return;
        }

        if (!day.removeMeal(new Meal(mealName))) {
            System.out.println("[Error] Meal could not be removed because it doesn't exist.");
        }
    }

    /**
     * @param weekAnchorDate the anchor date of the week to which the ingredient
     *                       should be added.
     * @param dayOfWeek      the day of the week to which the ingredient should be
     *                       added.
     * @param mealName       the name of the meal to which the ingredient should
     *                       be added.
     * @param ingredientName the name of the ingredient to be added.
     * @param quantity       the quantity of the ingredient to be added.
     */
    public void addIngredient(String weekAnchorDate, String dayOfWeek, String mealName, String ingredientName,
            double quantity) {
        Week week = Week.getWeekByAnchor(this.weeklyPlans, weekAnchorDate);
        if (week == null) {
            System.out.println("[Error] Ingredient could not be added because the given week does not exist.");
            return;
        }

        Day day = week.getDay(dayOfWeek);
        if (day == null) {
            System.out.println("[Error] Ingredient could not be added because the given day of the week is invalid.");
            return;
        }

        Meal meal = day.getMeal(new Meal(mealName));
        if (meal == null) {
            System.out.println("[Error] Ingredient could not be added because the given meal does not exist.");
            return;
        }

        Ingredient ing = new Ingredient(ingredientName, quantity);
        if (meal.getIngredients().contains(ing)) {
            System.out.println("[Error] Ingredient could not be added because it already exists.");
            return;
        }

        meal.addIngredient(ing);
    }

    /**
     * @param weekAnchorDate the anchor date of the week to which the ingredient
     *                       should be added.
     * @param dayOfWeek      the day of the week to which the ingredient should be
     *                       added.
     * @param mealName       the name of the meal to which the ingredient should
     *                       be added.
     * @param ingredientName the name of the ingredient to be added.
     * @param quantity       the quantity of the ingredient to be added.
     * @param carbsPer100    the amount of carbohydrates per 100 grams of the
     *                       ingredient to be added.
     * @param fatPer100      the amount of fat per 100 grams of the ingredient to be
     *                       added.
     * @param proteinPer100  the amount of protein per 100 grams of the ingredient
     *                       to be added.
     */
    public void addIngredient(String weekAnchorDate, String dayOfWeek, String mealName, String ingredientName,
            double quantity, double carbsPer100, double fatPer100, double proteinPer100) {
        Week week = Week.getWeekByAnchor(this.weeklyPlans, weekAnchorDate);
        if (week == null) {
            System.out.println("[Error] Ingredient could not be added because the given week does not exist.");
            return;
        }

        Day day = week.getDay(dayOfWeek);
        if (day == null) {
            System.out.println("[Error] Ingredient could not be added because the given day of the week is invalid.");
            return;
        }

        Meal meal = day.getMeal(new Meal(mealName));
        if (meal == null) {
            System.out.println("[Error] Ingredient could not be added because the given meal does not exist.");
            return;
        }

        Ingredient ing = new Ingredient(ingredientName, quantity, carbsPer100, fatPer100, proteinPer100);
        if (meal.getIngredients().contains(ing)) {
            System.out.println("[Error] Ingredient could not be added because it already exists.");
            return;
        }

        meal.addIngredient(ing);
    }

    /**
     * @param weekAnchorDate the anchor date of the week in which the ingredient
     *                       is found.
     * @param dayOfWeek      the day of the week in which the ingredient is found.
     * @param mealName       the name of the meal in which the ingredient is found.
     * @param ingredientName the name of the ingredient for which the quantity
     *                       should be modified.
     * @param newQuantity    the new quantity of the ingredient.
     */
    public void changeIngredientQuantity(String weekAnchorDate, String dayOfWeek, String mealName,
            String ingredientName, double newQuantity) {
        Week week = Week.getWeekByAnchor(this.weeklyPlans, weekAnchorDate);
        if (newQuantity <= 0) {
            System.out.println(
                    "[Error] Ingredient quantity could not be modified because the given quantity is zero or negative.");
            return;
        }

        if (week == null) {
            System.out.println(
                    "[Error] Ingredient quantity could not be modified because the given week does not exist.");
            return;
        }

        Day day = week.getDay(dayOfWeek);
        if (day == null) {
            System.out.println(
                    "[Error] Ingredient quantity could not be modified because the given day of the week is invalid.");
            return;
        }

        Meal meal = day.getMeal(new Meal(mealName));
        if (meal == null) {
            System.out.println(
                    "[Error] Ingredient quantity could not be modified because the given meal does not exist.");
            return;
        }

        Ingredient ing = meal.getIngredient(ingredientName);
        if (ing == null) {
            System.out.println(
                    "[Error] Ingredient quantity could not be modified because the given ingredient does not exist.");
            return;
        }

        ing.setQuantity(newQuantity);
    }

    /**
     * @param weekAnchorDate the anchor date of the week in which the ingredient
     *                       is found.
     * @param dayOfWeek      the day of the week in which the ingredient is found.
     * @param mealName       the name of the meal in which the ingredient is found.
     * @param ingredientName the name of the ingredient to be removed.
     */
    public void removeIngredient(String weekAnchorDate, String dayOfWeek, String mealName,
            String ingredientName) {
        Week week = Week.getWeekByAnchor(this.weeklyPlans, weekAnchorDate);
        if (week == null) {
            System.out.println("[Error] Ingredient could not be removed because the given week does not exist.");
            return;
        }

        Day day = week.getDay(dayOfWeek);
        if (day == null) {
            System.out.println("[Error] Ingredient could not be removed because the given day of the week is invalid.");
            return;
        }

        Meal meal = day.getMeal(new Meal(mealName));
        if (meal == null) {
            System.out.println("[Error] Ingredient could not be removed because the given meal does not exist.");
            return;
        }

        Ingredient ing = meal.getIngredient(ingredientName);
        if (ing == null) {
            System.out.println("[Error] Ingredient could not be removed because it does not exist.");
            return;
        }

        meal.removeIngredient(ing);
    }

    /**
     * @param weekAnchorDate the anchor date of the week for which average daily
     *                       carbohydrate consumption should be calculated.
     * @return the average daily carbohydrate consumption for the week with
     *         the given anchor date, or -1.0 if no such week exists.
     */
    public double getAvgDailyCarbsForWeek(String weekAnchorDate) {
        Week week = getWeek(weekAnchorDate);
        if (week == null) {
            System.out
                    .println(
                            "[Error] Could not calculate average daily carbohydrate consumption because the given week does not exist.");
            return -1.0;
        }

        return week.getAvgCarbsPerDay();
    }

    /**
     * @param weekAnchorDate the anchor date of the week for which average daily
     *                       fat consumption should be calculated.
     * @return the average daily fat consumption for the week with
     *         the given anchor date, or -1.0 if no such week exists.
     */
    public double getAvgDailyFatForWeek(String weekAnchorDate) {
        Week week = getWeek(weekAnchorDate);
        if (week == null) {
            System.out
                    .println(
                            "[Error] Could not calculate average daily fat consumption because the given week does not exist.");
            return -1.0;
        }

        return week.getAvgFatPerDay();
    }

    /**
     * @param weekAnchorDate the anchor date of the week for which average daily
     *                       protein consumption should be calculated.
     * @return the average daily protein consumption for the week with
     *         the given anchor date, or -1.0 if no such week exists.
     */
    public double getAvgDailyProteinForWeek(String weekAnchorDate) {
        Week week = getWeek(weekAnchorDate);
        if (week == null) {
            System.out
                    .println(
                            "[Error] Could not calculate average daily protein consumption because the given week does not exist.");
            return -1.0;
        }

        return week.getAvgProteinPerDay();
    }

    /**
     * @param weekAnchorDate the anchor date of the week for which average daily
     *                       Calorie intake should be calculated.
     * @return the average daily Calorie intake for the week with
     *         the given anchor date, or -1.0 if no such week exists.
     */
    public double getAvgDailyCaloriesForWeek(String weekAnchorDate) {
        Week week = getWeek(weekAnchorDate);
        if (week == null) {
            System.out
                    .println(
                            "[Error] Could not calculate average daily calories because the given week does not exist.");
            return -1.0;
        }

        return week.getAvgCaloriesPerDay();
    }

    /**
     * @param weekAnchorDate the anchor date of the week for which all ingredients
     *                       should be returned.
     * @return an ArrayList of Ingredient containing all ingredients for a week
     *         with a given anchor date.
     */
    public ArrayList<Ingredient> getWeekIngredientList(String weekAnchorDate) {
        Week week = getWeek(weekAnchorDate);
        if (week == null) {
            System.out
                    .println(
                            "[Error] Could not retrieve ingredient list because the given week does not exist.");
            return null;
        }

        return week.getAllIngredients();
    }

    /**
     * @param weekAnchorDate the anchor date of the week to be printed.
     * @return a tabular representation of the week with the given anchor
     *         date, including meals and their Calories counts, average daily
     *         Calories intake, average daily carbohydrate consumption, average
     *         daily fat consumption, and average daily protein consumption.
     */
    public void printWeek(String weekAnchorDate) {
        Week week = getWeek(weekAnchorDate);
        if (week == null) {
            System.out.println("[Error] Could not print nutritional summary because the given week does not exist.");
            return;
        }

        // Get formatted date.
        String[] dateTokens = Week.getDateFromString(weekAnchorDate);

        // Add header.
        String output = String.format("\nWeek of %s %d, %d\n", dateTokens[1], Integer.parseInt(dateTokens[2]),
                Integer.parseInt(dateTokens[0]));
        for (String dayOfWeek : DAYS_OF_THE_WEEK) {
            output += String.format("%-" + COL_WIDTH + "s|", fitCell(dayOfWeek));
        }
        output += "\n";
        for (int i = 0; i < LINE_WIDTH; i++) {
            output += "-";
        }
        output += "\n";

        // Add meals and ingredients for each day of the week.
        String[][] rows = getRowsToPrint(week);
        for (int i = 0; i < rows.length; i++) {
            for (int j = 0; j < rows[i].length; j++) {
                output += String.format("%-" + COL_WIDTH + "s|", fitCell(rows[i][j]));
            }
            output += "\n";
        }

        for (int i = 0; i < LINE_WIDTH; i++) {
            output += "-";
        }
        output += "\n";

        // Add week statistics.
        output += String.format("Average daily Calorie intake: %.2f kcal\n", week.getAvgCaloriesPerDay());
        output += String.format("Average daily carbohydrate consumption: %.2f g\n", week.getAvgCarbsPerDay());
        output += String.format("Average daily fat consumption: %.2f g\n", week.getAvgFatPerDay());
        output += String.format("Average daily protein consumption: %.2f g\n", week.getAvgProteinPerDay());

        System.out.println(output);
    }

    @Override
    public String toString() {
        String output = "";
        for (Week week : this.weeklyPlans) {
            output += week.toString() + "\n";
        }
        return output;
    }

    /**
     * Builds a 2D string grid used to print a weekly meal table.
     * 
     * @param week the week for which the grid should be built.
     * @return a 2D array of String containing meal names at even indices and
     *         Calorie values and odd indices.
     */
    private String[][] getRowsToPrint(Week week) {
        int maxRows = getMaxNumRows(week);
        String[][] result = new String[maxRows][DAYS_IN_WEEK];

        int mealCount = 0;
        int row = 0;
        while (mealCount < maxRows / 3) {
            for (int i = 0; i < DAYS_IN_WEEK; i++) {
                Day currDay = week.getDay(DAYS_OF_THE_WEEK[i]);
                ArrayList<Meal> meals = currDay.getMeals();

                if (mealCount < meals.size()) {
                    result[row][i] = meals.get(mealCount).getName();
                    result[row + 1][i] = String.format("%.2f kcal", meals.get(mealCount).getCalories());
                    result[row + 2][i] = "";
                } else {
                    result[row][i] = "";
                    result[row + 1][i] = "";
                    result[row + 2][i] = "";
                }
            }

            mealCount++;
            row += 3;
        }

        return result;
    }

    /**
     * Determines the maximum number of rows to be printed for a given week.
     * Finds the day of the week with the greatest number of meals, then
     * multiplies that number by three (since each meal requires three rows: one
     * for its name, one for its Calorie count, and one blank line).
     * 
     * @param week the week for which the maximum number of rows to print should
     *             be determined.
     * @return the maximum number of rows to print for the given week.
     */
    private int getMaxNumRows(Week week) {
        int max = 0;
        for (int i = 0; i < DAYS_IN_WEEK; i++) {
            Day curr = week.getDay(DAYS_OF_THE_WEEK[i]);
            int count = curr.getMeals().size() * 3;
            if (count > max) {
                max = count;
            }
        }
        return max;
    }

    /**
     * Allows a given string to fit into a cell of a table by truncating it
     * and replacing the truncated characters by "...". The length of the
     * cell is equal to COL_WIDTH.
     * 
     * @param s the string to be formatted to fit into a cell.
     * @return a truncated string with "..." replacing truncated characters, or
     *         the original string if its length did not exceed the cell length,
     *         or a truncated string without "..." if the cell length is less
     *         than 4.
     */
    private String fitCell(String s) {
        if (s == null) {
            throw new IllegalArgumentException("String to be fitted cannot be null.");
        }

        if (s.length() <= COL_WIDTH) {
            return s;
        }

        if (COL_WIDTH < 4) {
            return s.substring(0, COL_WIDTH);
        }

        return s.substring(0, COL_WIDTH - 3) + "...";
    }

}